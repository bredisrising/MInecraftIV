//#pragma kernel GenerateChunkDataKernel
#pragma kernel GenerateWholeChunkDataKernel

StructuredBuffer<int3> positions;
RWStructuredBuffer<int> outputBuffer;

[numthreads(256, 1, 1)]
void GenerateWholeChunkDataKernel(uint3 id : SV_DispatchThreadID)
{
	/*
		x = i // 256
		y = i % 256 // 16
		z = i % 16
	*/
	
	
	int3 chunkPos = positions[id.x];
	int3 voxelPosInWorldSpace = chunkPos * 16 + int3(id.x / 256, id.x % 256 / 16, id.x % 16);

	if(voxelPosInWorldSpace.y <= 32)
	{
		outputBuffer[id.x] = 3;
	}
	else
	{
		outputBuffer[id.x] = 0;
	}
}

/*
[numthreads(1, 1, 1)]
void GenerateChunkDataKernel (uint3 id : SV_DispatchThreadID)
{
	int3 chunkPos = positions[id.x];

	for(int x = 0; x < 16; x++)
	{
		for(int y = 0; y < 16; y++)
		{
			for(int z = 0; z < 16; z++)
			{
				int3 voxelPosInWorldSpace = chunkPos * 16 + int3(x, y, z);

				if(voxelPosInWorldSpace.y <= 32)
				{
					outputBuffer[id.x*4096 + x * 256 + y * 16 + z] = 3;
				}
				else
				{
					outputBuffer[id.x*4096 + x * 256 + y * 16 + z] = 0;
				}
			}
		}	
	}
}
*/



